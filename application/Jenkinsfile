pipeline {

	agent any

	environment {
		repo = 'https://github.com/ICFI/eagle.git'
		branch = 'master'

		// Container
		imageName = 'eagle'
		serviceName = "$imageName"

		// Directories
		appCheckoutDir = "$WORKSPACE/app_checkout"
		appBuildDir = "$appCheckoutDir/application"
		analysisResultsDir = "$WORKSPACE/analysis_results"

		// ECS / ECR info
		// Cluster name is used to label resources to differentiate between deployments
		cluster = sh (script: 'cat /etc/ecs/ecs.config | sed s/ECS_CLUSTER=//', returnStdout: true).trim()
		// Query the EC2 metadata service and return the current AWS region in which we're running
		region = sh (script: 'curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region', returnStdout: true).trim()
		// Name of the image including the ECR repo
		fqImageName = "${awsIdentity().account}.dkr.ecr.${region}.amazonaws.com/${imageName}-${cluster}"
	}

	stages {

		stage('Preparation') {
			steps {
				dir(appCheckoutDir) {
					sh 'pwd'
						git url: repo, branch: branch
				}
				// cleanup from prior runs
				sh "ls -al"
				sh "sudo rm -rf $analysisResultsDir"
				sh "mkdir $analysisResultsDir"
			}
		}

		stage('Build Image') {
			steps {
				dir(appBuildDir) {
					// sh 'set -x'
					sh "sudo docker build -t ${imageName}:${env.BUILD_ID} -f ./container/Dockerfile ."
				}
			}
		}

		stage ('Publish Test Results') {
			steps {
				script {
					// find the intermediate build-stage image by its "test" label
					build_stage_image_id = sh (
						script: 'sudo docker images --filter "label=test=true" -q',
						returnStdout: true
					).tokenize()[0]
				}
				println "pull analysis results from docker build stage image"
				// tag that biuld-stage image so we can run it
				sh "sudo docker tag $build_stage_image_id analysis_results:latest"
				// run the image so we can get analysis results from it
				sh 'sudo docker run --rm --name analysis_results -d analysis_results:latest tail -f /dev/null'
				// copy the analysis results locally
				sh "sudo docker cp analysis_results:/app/build $WORKSPACE/analysis_results"
				// kill the container
				sh "sudo docker stop analysis_results &"

				dir (analysisResultsDir){
					jacoco()
					// junit plugin wants "fresh" test results (a build with no changes
					//   will have test results with older dates).
					sh "sudo touch build/test-results/test/*.xml"
					junit "build/test-results/test/*.xml"
				}
			}
		}

		stage('Push Image') {
			steps {
				sh "aws configure set default.region ${region}"
				sh "sudo \$(aws ecr get-login --no-include-email)"
				sh "sudo docker tag ${imageName}:${env.BUILD_ID} ${fqImageName}:${env.BUILD_ID}"
				sh "sudo docker tag ${imageName}:${env.BUILD_ID} ${fqImageName}:latest"
				sh "sudo docker push ${fqImageName}:${env.BUILD_ID}"
				sh "sudo docker push ${fqImageName}:latest"
			}
		}

		stage('Deploy Service') {
			steps {
				sh "aws ecs update-service --cluster ${cluster} --service ${serviceName} --force-new-deployment"
			}
		}

	}

}