buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1")
    classpath("gradle.plugin.us.ascendtech:gwt-gradle:0.2.3")
    classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
    classpath("org.owasp:dependency-check-gradle:3.3.0")
  }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'us.ascendtech.js.npm'
apply plugin: 'org.sonarqube'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

jar {
  baseName = 'eagle'
  version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  // Spring Boot
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-aop'
  compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  
  //AuthO
  compile 'com.auth0:auth0:1.0.0'
  compile 'com.auth0:auth0-spring-security-api:1.0.0-rc.3'

  // Database - H2 by default
  compile("com.h2database:h2")

  // Lombok - Newer lombok versions are lacking Java9 support
  compile 'org.projectlombok:lombok:1.16.20'

  // Test
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

docker {
    dependsOn build
    name "eagle-img"
    files bootJar.archivePath
    dockerfile file('container/Dockerfile')
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
	outputs.dir snippetsDir
}

task copyBundle(type: Copy) {
    from ("build/js")
    into ("src/main/resources/public")
}

findbugs{
    findbugsTest.enabled=false
    ignoreFailures = true
}

pmd {
    pmdTest.enabled=false
    ignoreFailures = true
}

sonarqube{
	properties {
        property "sonar.scm.disabled", "true"
        property "sonar.sources", "src/main"
        property "sonar.javascript.file.suffixes", ".js,.jsx"
    }
}

task downloadDependencies(type: Exec) {
    configurations.testRuntime.files
    commandLine 'echo', 'Downloaded all dependencies'
}

task staticAnalysis {
	dependsOn tasks.withType(FindBugs)
	dependsOn tasks.withType(Pmd)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // Verify 80% test coverage limit
                minimum = 0.8
            }
        }
    }
}

// Build task ordering
build.dependsOn webpack
build.dependsOn copyBundle
copyBundle.mustRunAfter webpack
